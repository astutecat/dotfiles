!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Ctags	k,kind	/kind definitions/
!_TAG_KIND_DESCRIPTION!Ctags	l,langdef	/language definitions/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!Zsh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Zsh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Zsh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Zsh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Ctags	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!Zsh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/repos/dotfiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/9213292e/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Zsh!function	autoloaded	/function name passed to autoload built-in command/
!_TAG_ROLE_DESCRIPTION!Zsh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Zsh!script	autoloaded	/autoloaded/
!_TAG_ROLE_DESCRIPTION!Zsh!script	loaded	/loaded/
0	nvim_snippets/elixir.json	/^			"<% else %>"$/;"	s	array:eex_else.body
0	nvim_snippets/elixir.json	/^			"<% end %>$1"$/;"	s	array:eex_end_tag.body
0	nvim_snippets/elixir.json	/^			"<%= $1 %>"$/;"	s	array:eex_render_block.body
0	nvim_snippets/elixir.json	/^			"<%= cond do %>",$/;"	s	array:eex_cond.body
0	nvim_snippets/elixir.json	/^			"<%= for ${1:item} <- @$1s do %>",$/;"	s	array:for.body
0	nvim_snippets/elixir.json	/^			"<%= for ${1:item} <- @$1s do %>",$/;"	s	array:fori.body
0	nvim_snippets/elixir.json	/^			"<%= if $1 do %>",$/;"	s	array:eex_if.body
0	nvim_snippets/elixir.json	/^			"<%= if $1 do %>",$/;"	s	array:eex_if_else.body
0	nvim_snippets/elixir.json	/^			"<%= if $1, do: \\"{$1}\\" %>"$/;"	s	array:eex_ifa.body
0	nvim_snippets/elixir.json	/^			"<%= unless $1 do %>",$/;"	s	array:eex_unless.body
0	nvim_snippets/elixir.json	/^			"<datalist id=\\"${1}\\">",$/;"	s	array:eex_datalist.body
0	nvim_snippets/elixir.json	/^			"<input type=\\"checkbox\\" id=\\"${1}\\" name=\\"${2}\\" value=\\"${3}\\"\/>"$/;"	s	array:eex_checkbox_input.body
0	nvim_snippets/elixir.json	/^			"<input type=\\"hidden\\" name=\\"${1}\\" value=\\"${2}\\" \/>"$/;"	s	array:eex_hidden_input.body
0	nvim_snippets/elixir.json	/^			"<input type=\\"text\\" name=\\"${1}\\" value=\\"${2}\\"",$/;"	s	array:eex_input.body
0	nvim_snippets/elixir.json	/^			"@impl GenServer",$/;"	s	array:handle_call.body
0	nvim_snippets/elixir.json	/^			"@impl GenServer",$/;"	s	array:handle_cast.body
0	nvim_snippets/elixir.json	/^			"@impl GenServer",$/;"	s	array:handle_continue.body
0	nvim_snippets/elixir.json	/^			"@impl GenServer",$/;"	s	array:handle_info.body
0	nvim_snippets/elixir.json	/^			"def handle_event(${1:event}, _, socket) do",$/;"	s	array:lv_handle_event.body
0	nvim_snippets/elixir.json	/^			"def handle_info(${1:message}, socket) do",$/;"	s	array:lv_handle_info.body
0	nvim_snippets/elixir.json	/^			"def handle_params(params, _url, socket) do",$/;"	s	array:lv_handle_params.body
0	nvim_snippets/elixir.json	/^			"def mount(_params, _session, socket) do",$/;"	s	array:lv_mount.body
0	nvim_snippets/elixir.json	/^			"def render(assigns) do",$/;"	s	array:lv_rend.body
0	nvim_snippets/elixir.json	/^			"defmodule LiveViewStudioWeb.${1}Test do",$/;"	s	array:lv_test_module.body
0	nvim_snippets/elixir.json	/^			"test \\"${1:description}\\", %{conn: conn} do",$/;"	s	array:lv_test.body
0	nvim_snippets/elixir.json	/^			"~L\\"\\"\\"",$/;"	s	array:lv_template.body
0	nvim_snippets/elixir.json	/^      "defmodule $1 do",$/;"	s	array:DynamicSupervisor.body
0	nvim_snippets/elixir.json	/^      "defmodule $1 do",$/;"	s	array:Supervisor.body
0	nvim_snippets/elixir.json	/^      "defmodule ${RELATIVE_FILEPATH\/^([^\\\\\/\\\\\\\\]+[\\\\\/\\\\\\\\])|(\\\\.ex|\\\\.exs)$|/;"	s	array:GenServer.body
0	nvim_snippets/erlang.json	/^            "-behaviour(gen_event).",$/;"	s	array:erlang gen_event behavior.body
0	nvim_snippets/erlang.json	/^            "-behaviour(gen_fsm).",$/;"	s	array:erlang gen_fsm behavior.body
0	nvim_snippets/erlang.json	/^            "-behaviour(gen_server).",$/;"	s	array:erlang gen_server behavior.body
0	nvim_snippets/erlang.json	/^            "-behaviour(gen_statem).",$/;"	s	array:erlang gen_statem behavior.body
0	nvim_snippets/erlang.json	/^            "-behaviour(supervisor).",$/;"	s	array:erlang supervisor behavior.body
0	nvim_snippets/erlang.json	/^        "prefix" : ["gen_event-behaviour"],$/;"	s	array:erlang gen_event behavior.prefix
0	nvim_snippets/erlang.json	/^        "prefix" : ["gen_fsm-behaviour"],$/;"	s	array:erlang gen_fsm behavior.prefix
0	nvim_snippets/erlang.json	/^        "prefix" : ["gen_server-behaviour"],$/;"	s	array:erlang gen_server behavior.prefix
0	nvim_snippets/erlang.json	/^        "prefix" : ["gen_statem-behaviour"],$/;"	s	array:erlang gen_statem behavior.prefix
0	nvim_snippets/erlang.json	/^        "prefix" : ["supervisor-behaviour"],$/;"	s	array:erlang supervisor behavior.prefix
0	nvim_snippets/erlang.json	/^      "#{",$/;"	s	array:childspec.body
0	nvim_snippets/erlang.json	/^    "prefix": ["childspec"],$/;"	s	array:childspec.prefix
0	nvim_snippets/markdown.json	/^      "# Title (incident #)",$/;"	s	array:Class.body
0	nvim_snippets/markdown.json	/^    "prefix": ["incident-report"],$/;"	s	array:Class.prefix
1	nvim_snippets/elixir.json	/^			"       placeholder=\\"${3}\\" \/>"$/;"	s	array:eex_input.body
1	nvim_snippets/elixir.json	/^			"  $2",$/;"	s	array:eex_if.body
1	nvim_snippets/elixir.json	/^			"  $2",$/;"	s	array:eex_if_else.body
1	nvim_snippets/elixir.json	/^			"  $2",$/;"	s	array:eex_unless.body
1	nvim_snippets/elixir.json	/^			"  $2",$/;"	s	array:for.body
1	nvim_snippets/elixir.json	/^			"  $2",$/;"	s	array:fori.body
1	nvim_snippets/elixir.json	/^			"  ${0}",$/;"	s	array:eex_datalist.body
1	nvim_snippets/elixir.json	/^			"  <% $1 -> %>",$/;"	s	array:eex_cond.body
1	nvim_snippets/elixir.json	/^			"  socket = assign(socket, ${1:key}: ${2:value})",$/;"	s	array:lv_mount.body
1	nvim_snippets/elixir.json	/^			"  socket = assign(socket, ${2:key}: ${3:value})",$/;"	s	array:lv_handle_event.body
1	nvim_snippets/elixir.json	/^			"  socket = assign(socket, ${2:key}: ${3:value})",$/;"	s	array:lv_handle_info.body
1	nvim_snippets/elixir.json	/^			"  use LiveViewStudioWeb.ConnCase, async: true",$/;"	s	array:lv_test_module.body
1	nvim_snippets/elixir.json	/^			"  {:noreply, socket}",$/;"	s	array:lv_handle_params.body
1	nvim_snippets/elixir.json	/^			"  {:ok, view, _html} = live(conn, \\"${2:path}\\")",$/;"	s	array:lv_test.body
1	nvim_snippets/elixir.json	/^			"  ~L\\"\\"\\"",$/;"	s	array:lv_rend.body
1	nvim_snippets/elixir.json	/^			"${0}",$/;"	s	array:lv_template.body
1	nvim_snippets/elixir.json	/^			"def handle_call($1, _from, state) do",$/;"	s	array:handle_call.body
1	nvim_snippets/elixir.json	/^			"def handle_cast($1, state) do",$/;"	s	array:handle_cast.body
1	nvim_snippets/elixir.json	/^			"def handle_continue($1, state) do",$/;"	s	array:handle_continue.body
1	nvim_snippets/elixir.json	/^			"def handle_info($1, state) do",$/;"	s	array:handle_info.body
1	nvim_snippets/elixir.json	/^      "\\tuse DynamicSupervisor",$/;"	s	array:DynamicSupervisor.body
1	nvim_snippets/elixir.json	/^      "\\tuse GenServer",$/;"	s	array:GenServer.body
1	nvim_snippets/elixir.json	/^      "\\tuse Supervisor",$/;"	s	array:Supervisor.body
1	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
1	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
1	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
1	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
1	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang supervisor behavior.body
1	nvim_snippets/erlang.json	/^      "    id        => ${1:?MODULE}, % mandatory",$/;"	s	array:childspec.body
1	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
10	nvim_snippets/elixir.json	/^      "\\t\\tSupervisor.init(children, strategy: :one_for_one)",$/;"	s	array:Supervisor.body
10	nvim_snippets/elixir.json	/^      "\\t\\t\\tstart: {${ChildModule}, :start_link, [${child_args}]},",$/;"	s	array:DynamicSupervisor.body
10	nvim_snippets/elixir.json	/^      "\\t\\t{:ok, :initial_state}",$/;"	s	array:GenServer.body
10	nvim_snippets/erlang.json	/^            "    ,start     => {${2:?MODULE}, ${3:start_link}, [Args]} % mandatory",$/;"	s	array:erlang gen_server behavior.body
10	nvim_snippets/erlang.json	/^            "    SupervisorSpecification = #{",$/;"	s	array:erlang supervisor behavior.body
10	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
10	nvim_snippets/erlang.json	/^            "handle_call(_Request, State) ->",$/;"	s	array:erlang gen_event behavior.body
10	nvim_snippets/erlang.json	/^            "start(Name) ->",$/;"	s	array:erlang gen_fsm behavior.body
10	nvim_snippets/markdown.json	/^      "## Narrative",$/;"	s	array:Class.body
11	nvim_snippets/elixir.json	/^      "\\t\\t\\trestart: :transient,",$/;"	s	array:DynamicSupervisor.body
11	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:GenServer.body
11	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:Supervisor.body
11	nvim_snippets/erlang.json	/^            "        strategy => one_for_one, % one_for_one | one_for_all | rest_for_one | simpl/;"	s	array:erlang supervisor behavior.body
11	nvim_snippets/erlang.json	/^            "    gen_fsm:start(?MODULE, [Name], []).",$/;"	s	array:erlang gen_fsm behavior.body
11	nvim_snippets/erlang.json	/^            "    {ok, no_reply, State}.",$/;"	s	array:erlang gen_event behavior.body
11	nvim_snippets/erlang.json	/^            "   %,restart   => restart()  % optional",$/;"	s	array:erlang gen_server behavior.body
11	nvim_snippets/erlang.json	/^            "init(_Args) ->",$/;"	s	array:erlang gen_statem behavior.body
11	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
12	nvim_snippets/elixir.json	/^      "\\t\\t\\tshutdown: :brutal_kill,",$/;"	s	array:DynamicSupervisor.body
12	nvim_snippets/elixir.json	/^      "end"$/;"	s	array:GenServer.body
12	nvim_snippets/elixir.json	/^      "end"$/;"	s	array:Supervisor.body
12	nvim_snippets/erlang.json	/^            "        intensity => 10,",$/;"	s	array:erlang supervisor behavior.body
12	nvim_snippets/erlang.json	/^            "    {ok, state, []}.",$/;"	s	array:erlang gen_statem behavior.body
12	nvim_snippets/erlang.json	/^            "   %,type      => type()     % optional",$/;"	s	array:erlang gen_server behavior.body
12	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
12	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
12	nvim_snippets/markdown.json	/^      "## Incident Timeline",$/;"	s	array:Class.body
13	nvim_snippets/elixir.json	/^      "\\t\\t\\ttype: :worker,",$/;"	s	array:DynamicSupervisor.body
13	nvim_snippets/erlang.json	/^            "        period => 60},",$/;"	s	array:erlang supervisor behavior.body
13	nvim_snippets/erlang.json	/^            "   %,shutdown  => shutdown() % optional",$/;"	s	array:erlang gen_server behavior.body
13	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
13	nvim_snippets/erlang.json	/^            "handle_info(_Info, State) ->",$/;"	s	array:erlang gen_event behavior.body
13	nvim_snippets/erlang.json	/^            "stop(FsmRef) ->",$/;"	s	array:erlang gen_fsm behavior.body
13	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
14	nvim_snippets/elixir.json	/^      "\\t\\t\\tmodules: [${ChildModule}],",$/;"	s	array:DynamicSupervisor.body
14	nvim_snippets/erlang.json	/^            "    gen_fsm:stop(FsmRef).",$/;"	s	array:erlang gen_fsm behavior.body
14	nvim_snippets/erlang.json	/^            "    {ok, State}.",$/;"	s	array:erlang gen_event behavior.body
14	nvim_snippets/erlang.json	/^            "   %,modules   => [$2]  % optional",$/;"	s	array:erlang gen_server behavior.body
14	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang supervisor behavior.body
14	nvim_snippets/erlang.json	/^            "%% state_functions | handle_event_function | [_, state_enter].",$/;"	s	array:erlang gen_statem behavior.body
14	nvim_snippets/markdown.json	/^      "## Lessons Identified",$/;"	s	array:Class.body
15	nvim_snippets/elixir.json	/^      "\\t\\t}",$/;"	s	array:DynamicSupervisor.body
15	nvim_snippets/erlang.json	/^            "    ChildSpecifications = [",$/;"	s	array:erlang supervisor behavior.body
15	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
15	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
15	nvim_snippets/erlang.json	/^            "callback_mode() ->",$/;"	s	array:erlang gen_statem behavior.body
15	nvim_snippets/erlang.json	/^            "}.",$/;"	s	array:erlang gen_server behavior.body
15	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
16	nvim_snippets/elixir.json	/^      "",$/;"	s	array:DynamicSupervisor.body
16	nvim_snippets/erlang.json	/^            "        #{",$/;"	s	array:erlang supervisor behavior.body
16	nvim_snippets/erlang.json	/^            "    handle_event_function.",$/;"	s	array:erlang gen_statem behavior.body
16	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
16	nvim_snippets/erlang.json	/^            "start_link(Name) ->",$/;"	s	array:erlang gen_fsm behavior.body
16	nvim_snippets/erlang.json	/^            "terminate(_Args, _State) ->",$/;"	s	array:erlang gen_event behavior.body
16	nvim_snippets/markdown.json	/^      "### What went well",$/;"	s	array:Class.body
17	nvim_snippets/elixir.json	/^      "\\t\\tDynamicSupervisor.start_child(__MODULE__, child_spec)",$/;"	s	array:DynamicSupervisor.body
17	nvim_snippets/erlang.json	/^            "            id => some_worker,",$/;"	s	array:erlang supervisor behavior.body
17	nvim_snippets/erlang.json	/^            "    gen_fsm:start_link({local, Name}, ?MODULE, [Name], []).",$/;"	s	array:erlang gen_fsm behavior.body
17	nvim_snippets/erlang.json	/^            "    ok.",$/;"	s	array:erlang gen_event behavior.body
17	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
17	nvim_snippets/erlang.json	/^            "start_link(Args) ->",$/;"	s	array:erlang gen_server behavior.body
17	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
18	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:DynamicSupervisor.body
18	nvim_snippets/erlang.json	/^            "            start => {some_worker, start_link, []},",$/;"	s	array:erlang supervisor behavior.body
18	nvim_snippets/erlang.json	/^            "    %gen_server:start_link({local, NAME}, ?MODULE, [Args], []).",$/;"	s	array:erlang gen_server behavior.body
18	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
18	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
18	nvim_snippets/erlang.json	/^            "handle_event(enter, _OldState, _State, _Data) ->",$/;"	s	array:erlang gen_statem behavior.body
18	nvim_snippets/markdown.json	/^      "### What went wrong",$/;"	s	array:Class.body
19	nvim_snippets/elixir.json	/^      "",$/;"	s	array:DynamicSupervisor.body
19	nvim_snippets/erlang.json	/^            "            restart => permanent, % permanent | transient | temporary",$/;"	s	array:erlang supervisor behavior.body
19	nvim_snippets/erlang.json	/^            "    gen_server:start_link(?MODULE, [Args], []).",$/;"	s	array:erlang gen_server behavior.body
19	nvim_snippets/erlang.json	/^            "    keep_state_and_data;",$/;"	s	array:erlang gen_statem behavior.body
19	nvim_snippets/erlang.json	/^            "code_change(_OldVsn, State, _Extra) ->",$/;"	s	array:erlang gen_event behavior.body
19	nvim_snippets/erlang.json	/^            "init(_Args) ->",$/;"	s	array:erlang gen_fsm behavior.body
19	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
2	nvim_snippets/elixir.json	/^			"    $2",$/;"	s	array:eex_cond.body
2	nvim_snippets/elixir.json	/^			"  ${0}",$/;"	s	array:lv_rend.body
2	nvim_snippets/elixir.json	/^			"  ${0}",$/;"	s	array:lv_test.body
2	nvim_snippets/elixir.json	/^			"  {:noreply, socket}",$/;"	s	array:lv_handle_event.body
2	nvim_snippets/elixir.json	/^			"  {:noreply, socket}",$/;"	s	array:lv_handle_info.body
2	nvim_snippets/elixir.json	/^			"  {:ok, socket}",$/;"	s	array:lv_mount.body
2	nvim_snippets/elixir.json	/^			"",$/;"	s	array:lv_test_module.body
2	nvim_snippets/elixir.json	/^			"<% else %>",$/;"	s	array:eex_if_else.body
2	nvim_snippets/elixir.json	/^			"<% end %>"$/;"	s	array:eex_if.body
2	nvim_snippets/elixir.json	/^			"<% end %>"$/;"	s	array:eex_unless.body
2	nvim_snippets/elixir.json	/^			"<% end %>"$/;"	s	array:for.body
2	nvim_snippets/elixir.json	/^			"<% end %>"$/;"	s	array:fori.body
2	nvim_snippets/elixir.json	/^			"<\/datalist>",$/;"	s	array:eex_datalist.body
2	nvim_snippets/elixir.json	/^			"\\"\\"\\""$/;"	s	array:lv_template.body
2	nvim_snippets/elixir.json	/^			"\\t$0",$/;"	s	array:handle_call.body
2	nvim_snippets/elixir.json	/^			"\\t$0",$/;"	s	array:handle_cast.body
2	nvim_snippets/elixir.json	/^			"\\t$0",$/;"	s	array:handle_continue.body
2	nvim_snippets/elixir.json	/^			"\\t$0",$/;"	s	array:handle_info.body
2	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_handle_params.body
2	nvim_snippets/elixir.json	/^      "",$/;"	s	array:DynamicSupervisor.body
2	nvim_snippets/elixir.json	/^      "",$/;"	s	array:GenServer.body
2	nvim_snippets/elixir.json	/^      "",$/;"	s	array:Supervisor.body
2	nvim_snippets/erlang.json	/^            "%% API",$/;"	s	array:erlang gen_fsm behavior.body
2	nvim_snippets/erlang.json	/^            "%% API",$/;"	s	array:erlang gen_server behavior.body
2	nvim_snippets/erlang.json	/^            "%% API",$/;"	s	array:erlang supervisor behavior.body
2	nvim_snippets/erlang.json	/^            "-export([init\/1, handle_event\/2, handle_call\/2, handle_info\/2, terminate\/2, co/;"	s	array:erlang gen_event behavior.body
2	nvim_snippets/erlang.json	/^            "-export([stop\/0, start_link\/0]).",$/;"	s	array:erlang gen_statem behavior.body
2	nvim_snippets/erlang.json	/^      "    start     => {${2:?MODULE}, ${3:start_link}, [${4:[]}]} % mandatory",$/;"	s	array:childspec.body
2	nvim_snippets/markdown.json	/^      "## Summary",$/;"	s	array:Class.body
20	nvim_snippets/elixir.json	/^      "\\tdef init([${init_args}]) do",$/;"	s	array:DynamicSupervisor.body
20	nvim_snippets/erlang.json	/^            "            shutdown => 2000,",$/;"	s	array:erlang supervisor behavior.body
20	nvim_snippets/erlang.json	/^            "    {ok, State}.",$/;"	s	array:erlang gen_event behavior.body
20	nvim_snippets/erlang.json	/^            "    {ok, dummy_state, #state{dummy=1}}.",$/;"	s	array:erlang gen_fsm behavior.body
20	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
20	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
20	nvim_snippets/markdown.json	/^      "### Where we got lucky",$/;"	s	array:Class.body
21	nvim_snippets/elixir.json	/^      "\\t\\tDynamicSupervisor.init(strategy: :one_for_one)",$/;"	s	array:DynamicSupervisor.body
21	nvim_snippets/erlang.json	/^            "            type => worker, % worker | supervisor",$/;"	s	array:erlang supervisor behavior.body
21	nvim_snippets/erlang.json	/^            ""$/;"	s	array:erlang gen_event behavior.body
21	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
21	nvim_snippets/erlang.json	/^            "handle_event(_EventType, _EventContent, _State, _Data) ->",$/;"	s	array:erlang gen_statem behavior.body
21	nvim_snippets/erlang.json	/^            "init(_Args) ->",$/;"	s	array:erlang gen_server behavior.body
21	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
22	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:DynamicSupervisor.body
22	nvim_snippets/erlang.json	/^            "            modules => [some_worker]",$/;"	s	array:erlang supervisor behavior.body
22	nvim_snippets/erlang.json	/^            "    keep_state_and_data.",$/;"	s	array:erlang gen_statem behavior.body
22	nvim_snippets/erlang.json	/^            "    {ok, #{}}.",$/;"	s	array:erlang gen_server behavior.body
22	nvim_snippets/erlang.json	/^            "dummy_state(_Event, StateData) ->",$/;"	s	array:erlang gen_fsm behavior.body
22	nvim_snippets/markdown.json	/^      "## Appendices",$/;"	s	array:Class.body
23	nvim_snippets/elixir.json	/^      "end"$/;"	s	array:DynamicSupervisor.body
23	nvim_snippets/erlang.json	/^            "        }",$/;"	s	array:erlang supervisor behavior.body
23	nvim_snippets/erlang.json	/^            "    {next_state, dummy_state, StateData}.",$/;"	s	array:erlang gen_fsm behavior.body
23	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
23	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
23	nvim_snippets/markdown.json	/^      ""$/;"	s	array:Class.body
24	nvim_snippets/erlang.json	/^            "    ],",$/;"	s	array:erlang supervisor behavior.body
24	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
24	nvim_snippets/erlang.json	/^            "handle_call(stop, _From, State) ->",$/;"	s	array:erlang gen_server behavior.body
24	nvim_snippets/erlang.json	/^            "terminate(_Reason, _State, _Data) ->",$/;"	s	array:erlang gen_statem behavior.body
25	nvim_snippets/erlang.json	/^            "    ok.",$/;"	s	array:erlang gen_statem behavior.body
25	nvim_snippets/erlang.json	/^            "    {stop, normal, stopped, State};",$/;"	s	array:erlang gen_server behavior.body
25	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang supervisor behavior.body
25	nvim_snippets/erlang.json	/^            "dummy_state(_Event, From, StateData) ->",$/;"	s	array:erlang gen_fsm behavior.body
26	nvim_snippets/erlang.json	/^            "    gen_fsm:reply(From, ok),",$/;"	s	array:erlang gen_fsm behavior.body
26	nvim_snippets/erlang.json	/^            "    {ok, {SupervisorSpecification, ChildSpecifications}}.",$/;"	s	array:erlang supervisor behavior.body
26	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
26	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
27	nvim_snippets/erlang.json	/^            "    {next_state, dummy_state, StateData}.",$/;"	s	array:erlang gen_fsm behavior.body
27	nvim_snippets/erlang.json	/^            ""$/;"	s	array:erlang supervisor behavior.body
27	nvim_snippets/erlang.json	/^            "code_change(_OldVsn, State, Data, _Extra) ->",$/;"	s	array:erlang gen_statem behavior.body
27	nvim_snippets/erlang.json	/^            "handle_call(_Request, _From, State) ->",$/;"	s	array:erlang gen_server behavior.body
28	nvim_snippets/erlang.json	/^            "    {ok, State, Data}.",$/;"	s	array:erlang gen_statem behavior.body
28	nvim_snippets/erlang.json	/^            "    {reply, ok, State}.",$/;"	s	array:erlang gen_server behavior.body
28	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
29	nvim_snippets/erlang.json	/^            ""$/;"	s	array:erlang gen_statem behavior.body
29	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
29	nvim_snippets/erlang.json	/^            "handle_event(_Event, _StateName, StateData) ->",$/;"	s	array:erlang gen_fsm behavior.body
3	nvim_snippets/elixir.json	/^			"  $3",$/;"	s	array:eex_if_else.body
3	nvim_snippets/elixir.json	/^			"  <% true -> %>",$/;"	s	array:eex_cond.body
3	nvim_snippets/elixir.json	/^			"  \\"\\"\\"",$/;"	s	array:lv_rend.body
3	nvim_snippets/elixir.json	/^			"  import Phoenix.LiveViewTest",$/;"	s	array:lv_test_module.body
3	nvim_snippets/elixir.json	/^			""$/;"	s	array:eex_datalist.body
3	nvim_snippets/elixir.json	/^			"\\t{:noreply, state}",$/;"	s	array:handle_cast.body
3	nvim_snippets/elixir.json	/^			"\\t{:noreply, state}",$/;"	s	array:handle_continue.body
3	nvim_snippets/elixir.json	/^			"\\t{:noreply, state}",$/;"	s	array:handle_info.body
3	nvim_snippets/elixir.json	/^			"\\t{:reply, :ok, state}",$/;"	s	array:handle_call.body
3	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_handle_event.body
3	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_handle_info.body
3	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_mount.body
3	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_test.body
3	nvim_snippets/elixir.json	/^      "\\tdef start_link(${args}) do",$/;"	s	array:Supervisor.body
3	nvim_snippets/elixir.json	/^      "\\tdef start_link(${init_args}) do",$/;"	s	array:DynamicSupervisor.body
3	nvim_snippets/elixir.json	/^      "\\tdef start_link(${init_args}) do",$/;"	s	array:GenServer.body
3	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
3	nvim_snippets/erlang.json	/^            "-export([child_spec\/0, child_spec\/1, stop\/1, start_link\/1]).",$/;"	s	array:erlang gen_server behavior.body
3	nvim_snippets/erlang.json	/^            "-export([init\/1, callback_mode\/0, handle_event\/4, terminate\/3, code_change\/4])/;"	s	array:erlang gen_statem behavior.body
3	nvim_snippets/erlang.json	/^            "-export([start\/1, stop\/1, start_link\/1]).",$/;"	s	array:erlang gen_fsm behavior.body
3	nvim_snippets/erlang.json	/^            "-export([start_link\/0]).",$/;"	s	array:erlang supervisor behavior.body
3	nvim_snippets/erlang.json	/^      "   %restart   => restart()  % optional",$/;"	s	array:childspec.body
3	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
30	nvim_snippets/erlang.json	/^            "    {next_state, dummy_state, StateData}.",$/;"	s	array:erlang gen_fsm behavior.body
30	nvim_snippets/erlang.json	/^            "handle_cast(_Msg, State) ->",$/;"	s	array:erlang gen_server behavior.body
31	nvim_snippets/erlang.json	/^            "    {noreply, State}.",$/;"	s	array:erlang gen_server behavior.body
31	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
32	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
32	nvim_snippets/erlang.json	/^            "handle_sync_event(_Event, From, _StateName, StateData) ->",$/;"	s	array:erlang gen_fsm behavior.body
33	nvim_snippets/erlang.json	/^            "    gen_fsm:reply(From, ok),",$/;"	s	array:erlang gen_fsm behavior.body
33	nvim_snippets/erlang.json	/^            "handle_info(_Info, State) ->",$/;"	s	array:erlang gen_server behavior.body
34	nvim_snippets/erlang.json	/^            "    {next_state, dummy_state, StateData}.",$/;"	s	array:erlang gen_fsm behavior.body
34	nvim_snippets/erlang.json	/^            "    {noreply, State}.",$/;"	s	array:erlang gen_server behavior.body
35	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
35	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
36	nvim_snippets/erlang.json	/^            "handle_info(_Info, _StateName, StateData) ->",$/;"	s	array:erlang gen_fsm behavior.body
36	nvim_snippets/erlang.json	/^            "terminate(_Reason, _State) ->",$/;"	s	array:erlang gen_server behavior.body
37	nvim_snippets/erlang.json	/^            "    ok.",$/;"	s	array:erlang gen_server behavior.body
37	nvim_snippets/erlang.json	/^            "    {next_state, dummy_state, StateData}.",$/;"	s	array:erlang gen_fsm behavior.body
38	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
38	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
39	nvim_snippets/erlang.json	/^            "code_change(_OldVsn, State, _Extra) ->",$/;"	s	array:erlang gen_server behavior.body
39	nvim_snippets/erlang.json	/^            "terminate(_Reason, _StateName, _StateData) ->",$/;"	s	array:erlang gen_fsm behavior.body
4	nvim_snippets/elixir.json	/^			"    $3",$/;"	s	array:eex_cond.body
4	nvim_snippets/elixir.json	/^			"",$/;"	s	array:lv_test_module.body
4	nvim_snippets/elixir.json	/^			"<% end %>"$/;"	s	array:eex_if_else.body
4	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:handle_call.body
4	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:handle_cast.body
4	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:handle_continue.body
4	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:handle_info.body
4	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_rend.body
4	nvim_snippets/elixir.json	/^      "\\t\\t# you may want to register your server with `name: __MODULE__`",$/;"	s	array:GenServer.body
4	nvim_snippets/elixir.json	/^      "\\t\\tDynamicSupervisor.start_link(__MODULE__, [${init_args}], name: __MODULE__)",$/;"	s	array:DynamicSupervisor.body
4	nvim_snippets/elixir.json	/^      "\\t\\tSupervisor.start_link(__MODULE__, [${args}], name: __MODULE__)",$/;"	s	array:Supervisor.body
4	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
4	nvim_snippets/erlang.json	/^            "-export([init\/1, handle_call\/3, handle_cast\/2, handle_info\/2, terminate\/2, cod/;"	s	array:erlang gen_server behavior.body
4	nvim_snippets/erlang.json	/^            "-export([init\/1, handle_event\/3, handle_sync_event\/4, handle_info\/3,",$/;"	s	array:erlang gen_fsm behavior.body
4	nvim_snippets/erlang.json	/^            "-export([init\/1]).",$/;"	s	array:erlang supervisor behavior.body
4	nvim_snippets/erlang.json	/^            "init(_Args) ->",$/;"	s	array:erlang gen_event behavior.body
4	nvim_snippets/erlang.json	/^      "   %type      => type(),    % optional",$/;"	s	array:childspec.body
4	nvim_snippets/markdown.json	/^      "## Impact",$/;"	s	array:Class.body
40	nvim_snippets/erlang.json	/^            "    ok.",$/;"	s	array:erlang gen_fsm behavior.body
40	nvim_snippets/erlang.json	/^            "    {ok, State}.",$/;"	s	array:erlang gen_server behavior.body
41	nvim_snippets/erlang.json	/^            ""$/;"	s	array:erlang gen_server behavior.body
41	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
42	nvim_snippets/erlang.json	/^            "code_change(_OldVersion, _StateName, StateData, _Extra) ->",$/;"	s	array:erlang gen_fsm behavior.body
43	nvim_snippets/erlang.json	/^            "    {ok, dummy_state, StateData}.",$/;"	s	array:erlang gen_fsm behavior.body
44	nvim_snippets/erlang.json	/^            ""$/;"	s	array:erlang gen_fsm behavior.body
5	nvim_snippets/elixir.json	/^			"  ${0}",$/;"	s	array:lv_test_module.body
5	nvim_snippets/elixir.json	/^			"<% end %>"$/;"	s	array:eex_cond.body
5	nvim_snippets/elixir.json	/^      "\\t\\t# as a third argument to `start_link`",$/;"	s	array:GenServer.body
5	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:DynamicSupervisor.body
5	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:Supervisor.body
5	nvim_snippets/erlang.json	/^            "         terminate\/3, code_change\/4,",$/;"	s	array:erlang gen_fsm behavior.body
5	nvim_snippets/erlang.json	/^            "    {ok, []}.",$/;"	s	array:erlang gen_event behavior.body
5	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
5	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang supervisor behavior.body
5	nvim_snippets/erlang.json	/^            "stop() ->",$/;"	s	array:erlang gen_statem behavior.body
5	nvim_snippets/erlang.json	/^      "   %shutdown  => shutdown() % optional",$/;"	s	array:childspec.body
5	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
6	nvim_snippets/elixir.json	/^			"end"$/;"	s	array:lv_test_module.body
6	nvim_snippets/elixir.json	/^      "",$/;"	s	array:DynamicSupervisor.body
6	nvim_snippets/elixir.json	/^      "",$/;"	s	array:Supervisor.body
6	nvim_snippets/elixir.json	/^      "\\t\\tGenServer.start_link(__MODULE__, [${init_args}])",$/;"	s	array:GenServer.body
6	nvim_snippets/erlang.json	/^            "         dummy_state\/2, dummy_state\/3]).",$/;"	s	array:erlang gen_fsm behavior.body
6	nvim_snippets/erlang.json	/^            "    gen_statem:stop(?MODULE).",$/;"	s	array:erlang gen_statem behavior.body
6	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
6	nvim_snippets/erlang.json	/^            "child_spec() -> child_spec([]).",$/;"	s	array:erlang gen_server behavior.body
6	nvim_snippets/erlang.json	/^            "start_link() ->",$/;"	s	array:erlang supervisor behavior.body
6	nvim_snippets/erlang.json	/^      "   %modules   => [$2]       % optional",$/;"	s	array:childspec.body
6	nvim_snippets/markdown.json	/^      "## Follow-up Actions",$/;"	s	array:Class.body
7	nvim_snippets/elixir.json	/^      "\\tdef init([${args}]) do",$/;"	s	array:Supervisor.body
7	nvim_snippets/elixir.json	/^      "\\tdef start_child(${child_args}) do",$/;"	s	array:DynamicSupervisor.body
7	nvim_snippets/elixir.json	/^      "\\tend",$/;"	s	array:GenServer.body
7	nvim_snippets/erlang.json	/^            "    supervisor:start_link({local, ?MODULE}, ?MODULE, []).",$/;"	s	array:erlang supervisor behavior.body
7	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
7	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_server behavior.body
7	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_statem behavior.body
7	nvim_snippets/erlang.json	/^            "handle_event(_Event, State) ->",$/;"	s	array:erlang gen_event behavior.body
7	nvim_snippets/erlang.json	/^      "}"$/;"	s	array:childspec.body
7	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
8	nvim_snippets/elixir.json	/^      "",$/;"	s	array:GenServer.body
8	nvim_snippets/elixir.json	/^      "\\t\\tchild_spec = %{",$/;"	s	array:DynamicSupervisor.body
8	nvim_snippets/elixir.json	/^      "\\t\\tchildren = []",$/;"	s	array:Supervisor.body
8	nvim_snippets/erlang.json	/^            "    {ok, State}.",$/;"	s	array:erlang gen_event behavior.body
8	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang supervisor behavior.body
8	nvim_snippets/erlang.json	/^            "-record(state, {dummy}).",$/;"	s	array:erlang gen_fsm behavior.body
8	nvim_snippets/erlang.json	/^            "child_spec(Args) -> #{",$/;"	s	array:erlang gen_server behavior.body
8	nvim_snippets/erlang.json	/^            "start_link() ->",$/;"	s	array:erlang gen_statem behavior.body
8	nvim_snippets/markdown.json	/^      "## Contributing Factors",$/;"	s	array:Class.body
9	nvim_snippets/elixir.json	/^      "",$/;"	s	array:Supervisor.body
9	nvim_snippets/elixir.json	/^      "\\t\\t\\tid: ${ChildModule},",$/;"	s	array:DynamicSupervisor.body
9	nvim_snippets/elixir.json	/^      "\\tdef init(_args) do",$/;"	s	array:GenServer.body
9	nvim_snippets/erlang.json	/^            "    gen_statem:start_link({local, ?MODULE}, ?MODULE, [], []).",$/;"	s	array:erlang gen_statem behavior.body
9	nvim_snippets/erlang.json	/^            "    id        => ${1:?MODULE} % mandatory",$/;"	s	array:erlang gen_server behavior.body
9	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_event behavior.body
9	nvim_snippets/erlang.json	/^            "",$/;"	s	array:erlang gen_fsm behavior.body
9	nvim_snippets/erlang.json	/^            "init(_Args) ->",$/;"	s	array:erlang supervisor behavior.body
9	nvim_snippets/markdown.json	/^      "",$/;"	s	array:Class.body
Class	nvim_snippets/markdown.json	/^  "Class": {$/;"	o
DynamicSupervisor	nvim_snippets/elixir.json	/^  "DynamicSupervisor": {$/;"	o
GenServer	nvim_snippets/elixir.json	/^	"GenServer": {$/;"	o
Supervisor	nvim_snippets/elixir.json	/^	"Supervisor": {$/;"	o
["elixirls"]	private_dot_config/nvim/lua/plugins/config/lspconfig.lua	/^  ["elixirls"] = function ()$/;"	f
["sumneko_lua"]	private_dot_config/nvim/lua/plugins/config/lspconfig.lua	/^  ["sumneko_lua"] = function ()$/;"	f
ascii_bold	private_dot_config/neofetch/config.conf	/^ascii_bold="off"$/;"	k
ascii_colors	private_dot_config/neofetch/config.conf	/^ascii_colors=(distro)$/;"	k
ascii_distro	private_dot_config/neofetch/config.conf	/^ascii_distro="auto"$/;"	k
background_color	private_dot_config/neofetch/config.conf	/^background_color=$/;"	k
bar_border	private_dot_config/neofetch/config.conf	/^bar_border="on"$/;"	k
bar_char_elapsed	private_dot_config/neofetch/config.conf	/^bar_char_elapsed="-"$/;"	k
bar_char_total	private_dot_config/neofetch/config.conf	/^bar_char_total="="$/;"	k
bar_color_elapsed	private_dot_config/neofetch/config.conf	/^bar_color_elapsed="distro"$/;"	k
bar_color_total	private_dot_config/neofetch/config.conf	/^bar_color_total="distro"$/;"	k
bar_length	private_dot_config/neofetch/config.conf	/^bar_length=15$/;"	k
battery_display	private_dot_config/neofetch/config.conf	/^battery_display="off"$/;"	k
before	private_dot_config/nvim/lua/plugins/config/cmp.lua	/^      before = function(entry, vim_item)$/;"	f
block_height	private_dot_config/neofetch/config.conf	/^block_height=1$/;"	k
block_range	private_dot_config/neofetch/config.conf	/^block_range=(0 15)$/;"	k
block_width	private_dot_config/neofetch/config.conf	/^block_width=3$/;"	k
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_checkbox_input
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_cond
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_datalist
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_else
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_end_tag
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_hidden_input
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_if
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_if_else
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_ifa
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_input
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_render_block
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:eex_unless
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:for
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:fori
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:handle_call
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:handle_cast
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:handle_continue
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:handle_info
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_handle_event
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_handle_info
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_handle_params
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_mount
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_rend
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_template
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_test
body	nvim_snippets/elixir.json	/^		"body": [$/;"	a	object:lv_test_module
body	nvim_snippets/elixir.json	/^    "body": [$/;"	a	object:DynamicSupervisor
body	nvim_snippets/elixir.json	/^    "body": [$/;"	a	object:GenServer
body	nvim_snippets/elixir.json	/^    "body": [$/;"	a	object:Supervisor
body	nvim_snippets/erlang.json	/^        "body"  : [$/;"	a	object:erlang gen_event behavior
body	nvim_snippets/erlang.json	/^        "body"  : [$/;"	a	object:erlang gen_server behavior
body	nvim_snippets/erlang.json	/^        "body"  : [$/;"	a	object:erlang gen_statem behavior
body	nvim_snippets/erlang.json	/^        "body"  : [$/;"	a	object:erlang supervisor behavior
body	nvim_snippets/erlang.json	/^        "body" : [$/;"	a	object:erlang gen_fsm behavior
body	nvim_snippets/erlang.json	/^    "body": [$/;"	a	object:childspec
body	nvim_snippets/markdown.json	/^    "body": [$/;"	a	object:Class
bold	private_dot_config/neofetch/config.conf	/^bold="on"$/;"	k
buf_set_keymap	private_dot_config/nvim/lua/plugins/config/lspconfig.lua	/^  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end$/;"	f
buf_set_option	private_dot_config/nvim/lua/plugins/config/lspconfig.lua	/^  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end$/;"	f
childspec	nvim_snippets/erlang.json	/^  "childspec" : {$/;"	o
col_offset	private_dot_config/neofetch/config.conf	/^col_offset="auto"$/;"	k
color_blocks	private_dot_config/neofetch/config.conf	/^color_blocks="on"$/;"	k
colors	private_dot_config/neofetch/config.conf	/^colors=(distro)$/;"	k
config	private_dot_config/nvim/lua/plugins/init.lua	/^    config = function() require("nvim-autopairs").setup {} end,$/;"	f
config	private_dot_config/nvim/lua/plugins/init.lua	/^    config = function()$/;"	f
config	private_dot_config/nvim/lua/plugins/language_support.lua	/^  config = function()$/;"	f
config	private_dot_config/nvim/lua/plugins/look_and_feel.lua	/^    config = function() require('nvim-web-devicons').setup {} end$/;"	f
config	private_dot_config/nvim/lua/plugins/lsp.lua	/^    config = function()$/;"	f
cpu_brand	private_dot_config/neofetch/config.conf	/^cpu_brand="on"$/;"	k
cpu_cores	private_dot_config/neofetch/config.conf	/^cpu_cores="logical"$/;"	k
cpu_display	private_dot_config/neofetch/config.conf	/^cpu_display="off"$/;"	k
cpu_speed	private_dot_config/neofetch/config.conf	/^cpu_speed="on"$/;"	k
cpu_temp	private_dot_config/neofetch/config.conf	/^cpu_temp="off"$/;"	k
crop_mode	private_dot_config/neofetch/config.conf	/^crop_mode="normal"$/;"	k
crop_offset	private_dot_config/neofetch/config.conf	/^crop_offset="center"$/;"	k
custom_location	private_dot_config/nvim/lua/plugins/config/lualine.lua	/^local function custom_location()$/;"	f
customizeSelector	private_dot_config/nvim/lua/plugins/config/nvim-ufo.lua	/^local function customizeSelector(bufnr)$/;"	f
de_version	private_dot_config/neofetch/config.conf	/^de_version="on"$/;"	k
description	nvim_snippets/elixir.json	/^		"description": "<% end %> end tag"$/;"	s	object:eex_end_tag
description	nvim_snippets/elixir.json	/^		"description": "<%= %> render block"$/;"	s	object:eex_render_block
description	nvim_snippets/elixir.json	/^		"description": "EEx  unless"$/;"	s	object:eex_unless
description	nvim_snippets/elixir.json	/^		"description": "EEx checkbox input"$/;"	s	object:eex_checkbox_input
description	nvim_snippets/elixir.json	/^		"description": "EEx cond"$/;"	s	object:eex_cond
description	nvim_snippets/elixir.json	/^		"description": "EEx datalist"$/;"	s	object:eex_datalist
description	nvim_snippets/elixir.json	/^		"description": "EEx else"$/;"	s	object:eex_else
description	nvim_snippets/elixir.json	/^		"description": "EEx for comprehension with items"$/;"	s	object:fori
description	nvim_snippets/elixir.json	/^		"description": "EEx for"$/;"	s	object:for
description	nvim_snippets/elixir.json	/^		"description": "EEx hidden input"$/;"	s	object:eex_hidden_input
description	nvim_snippets/elixir.json	/^		"description": "EEx if else"$/;"	s	object:eex_if_else
description	nvim_snippets/elixir.json	/^		"description": "EEx if for attribute"$/;"	s	object:eex_ifa
description	nvim_snippets/elixir.json	/^		"description": "EEx if"$/;"	s	object:eex_if
description	nvim_snippets/elixir.json	/^		"description": "EEx text input"$/;"	s	object:eex_input
description	nvim_snippets/elixir.json	/^		"description": "LiveView handle_event function"$/;"	s	object:lv_handle_event
description	nvim_snippets/elixir.json	/^		"description": "LiveView handle_info function"$/;"	s	object:lv_handle_info
description	nvim_snippets/elixir.json	/^		"description": "LiveView handle_params function"$/;"	s	object:lv_handle_params
description	nvim_snippets/elixir.json	/^		"description": "LiveView inline template"$/;"	s	object:lv_template
description	nvim_snippets/elixir.json	/^		"description": "LiveView mount function"$/;"	s	object:lv_mount
description	nvim_snippets/elixir.json	/^		"description": "LiveView render function"$/;"	s	object:lv_rend
description	nvim_snippets/elixir.json	/^		"description": "LiveView test module"$/;"	s	object:lv_test_module
description	nvim_snippets/elixir.json	/^		"description": "LiveView test"$/;"	s	object:lv_test
description	nvim_snippets/elixir.json	/^    "description": "Insert code for a DynamicSupervisor",$/;"	s	object:DynamicSupervisor
description	nvim_snippets/elixir.json	/^    "description": "Insert code for a OTP GenServer",$/;"	s	object:GenServer
description	nvim_snippets/elixir.json	/^    "description": "Insert code for an OTP Supervisor",$/;"	s	object:Supervisor
description	nvim_snippets/erlang.json	/^        "description" : "generate an empty gen_event"$/;"	s	object:erlang gen_event behavior
description	nvim_snippets/erlang.json	/^        "description" : "generate an empty gen_fsm"$/;"	s	object:erlang gen_fsm behavior
description	nvim_snippets/erlang.json	/^        "description" : "generate an empty gen_server"$/;"	s	object:erlang gen_server behavior
description	nvim_snippets/erlang.json	/^        "description" : "generate an empty gen_statem"$/;"	s	object:erlang gen_statem behavior
description	nvim_snippets/erlang.json	/^        "description" : "generate an example of supervisor"$/;"	s	object:erlang supervisor behavior
description	nvim_snippets/erlang.json	/^    "description": "erlang supervisor childspec map"$/;"	s	object:childspec
description	nvim_snippets/markdown.json	/^    "description": "incident report template"$/;"	s	object:Class
disk_display	private_dot_config/neofetch/config.conf	/^disk_display="off"$/;"	k
disk_percent	private_dot_config/neofetch/config.conf	/^disk_percent="on"$/;"	k
disk_show	private_dot_config/neofetch/config.conf	/^disk_show=('\/')$/;"	k
disk_subtitle	private_dot_config/neofetch/config.conf	/^disk_subtitle="mount"$/;"	k
distro_shorthand	private_dot_config/neofetch/config.conf	/^distro_shorthand="off"$/;"	k
eex_checkbox_input	nvim_snippets/elixir.json	/^	"eex_checkbox_input": {$/;"	o
eex_cond	nvim_snippets/elixir.json	/^	"eex_cond": {$/;"	o
eex_datalist	nvim_snippets/elixir.json	/^	"eex_datalist": {$/;"	o
eex_else	nvim_snippets/elixir.json	/^	"eex_else": {$/;"	o
eex_end_tag	nvim_snippets/elixir.json	/^	"eex_end_tag": {$/;"	o
eex_hidden_input	nvim_snippets/elixir.json	/^	"eex_hidden_input": {$/;"	o
eex_if	nvim_snippets/elixir.json	/^	"eex_if": {$/;"	o
eex_if_else	nvim_snippets/elixir.json	/^	"eex_if_else": {$/;"	o
eex_ifa	nvim_snippets/elixir.json	/^	"eex_ifa": {$/;"	o
eex_input	nvim_snippets/elixir.json	/^	"eex_input": {$/;"	o
eex_render_block	nvim_snippets/elixir.json	/^	"eex_render_block": {$/;"	o
eex_unless	nvim_snippets/elixir.json	/^	"eex_unless": {$/;"	o
enabled_layouts tall	private_dot_config/kitty/kitty.conf	/^enabled_layouts tall:bias=50;full_size=1;mirrored=false, fat, stack, horizontal$/;"	k
ensure_packer	private_dot_config/nvim/lua/plugins/init.lua	/^local ensure_packer = function()$/;"	f
erlang gen_event behavior	nvim_snippets/erlang.json	/^    "erlang gen_event behavior" : {$/;"	o
erlang gen_fsm behavior	nvim_snippets/erlang.json	/^    "erlang gen_fsm behavior" : {$/;"	o
erlang gen_server behavior	nvim_snippets/erlang.json	/^  "erlang gen_server behavior" : {$/;"	o
erlang gen_statem behavior	nvim_snippets/erlang.json	/^    "erlang gen_statem behavior" : {$/;"	o
erlang supervisor behavior	nvim_snippets/erlang.json	/^    "erlang supervisor behavior" : {$/;"	o
expand	private_dot_config/nvim/lua/plugins/config/cmp.lua	/^    expand = function(args)$/;"	f
for	nvim_snippets/elixir.json	/^	"for": {$/;"	o
fori	nvim_snippets/elixir.json	/^	"fori": {$/;"	o
gap	private_dot_config/neofetch/config.conf	/^gap=3$/;"	k
gpu_brand	private_dot_config/neofetch/config.conf	/^gpu_brand="on"$/;"	k
gpu_type	private_dot_config/neofetch/config.conf	/^gpu_type="all"$/;"	k
gtk2	private_dot_config/neofetch/config.conf	/^gtk2="on"$/;"	k
gtk3	private_dot_config/neofetch/config.conf	/^gtk3="on"$/;"	k
gtk_shorthand	private_dot_config/neofetch/config.conf	/^gtk_shorthand="off"$/;"	k
handleFallbackException	private_dot_config/nvim/lua/plugins/config/nvim-ufo.lua	/^  local function handleFallbackException(err, providerName)$/;"	f
handle_call	nvim_snippets/elixir.json	/^	"handle_call": {$/;"	o
handle_cast	nvim_snippets/elixir.json	/^	"handle_cast": {$/;"	o
handle_continue	nvim_snippets/elixir.json	/^	"handle_continue": {$/;"	o
handle_info	nvim_snippets/elixir.json	/^	"handle_info": {$/;"	o
handler	private_dot_config/nvim/lua/plugins/config/nvim-ufo.lua	/^local handler = function(virtText, lnum, endLnum, width, truncate)$/;"	f
image_backend	private_dot_config/neofetch/config.conf	/^image_backend="ascii"$/;"	k
image_loop	private_dot_config/neofetch/config.conf	/^image_loop="off"$/;"	k
image_size	private_dot_config/neofetch/config.conf	/^image_size="auto"$/;"	k
image_source	private_dot_config/neofetch/config.conf	/^image_source="auto"$/;"	k
kernel_shorthand	private_dot_config/neofetch/config.conf	/^kernel_shorthand="on"$/;"	k
load	private_dot_config/nvim/lua/plugins/completion.lua	/^M.load = function(use)$/;"	f	unknown:M
load	private_dot_config/nvim/lua/plugins/language_support.lua	/^M.load = function(use)$/;"	f	unknown:M
load	private_dot_config/nvim/lua/plugins/look_and_feel.lua	/^M.load = function(use)$/;"	f	unknown:M
load	private_dot_config/nvim/lua/plugins/lsp.lua	/^M.load = function(use)$/;"	f	unknown:M
lv_handle_event	nvim_snippets/elixir.json	/^	"lv_handle_event": {$/;"	o
lv_handle_info	nvim_snippets/elixir.json	/^	"lv_handle_info": {$/;"	o
lv_handle_params	nvim_snippets/elixir.json	/^	"lv_handle_params": {$/;"	o
lv_mount	nvim_snippets/elixir.json	/^	"lv_mount": {$/;"	o
lv_rend	nvim_snippets/elixir.json	/^	"lv_rend": {$/;"	o
lv_template	nvim_snippets/elixir.json	/^	"lv_template": {$/;"	o
lv_test	nvim_snippets/elixir.json	/^	"lv_test": {$/;"	o
lv_test_module	nvim_snippets/elixir.json	/^	"lv_test_module": {$/;"	o
memory_display	private_dot_config/neofetch/config.conf	/^memory_display="off"$/;"	k
memory_percent	private_dot_config/neofetch/config.conf	/^memory_percent="off"$/;"	k
memory_unit	private_dot_config/neofetch/config.conf	/^memory_unit="mib"$/;"	k
mpc_args	private_dot_config/neofetch/config.conf	/^mpc_args=()$/;"	k
multiple_tabs_exist	private_dot_config/nvim/lua/plugins/config/lualine.lua	/^local function multiple_tabs_exist()$/;"	f
music_player	private_dot_config/neofetch/config.conf	/^music_player="auto"$/;"	k
on_attach	private_dot_config/nvim/lua/plugins/config/lspconfig.lua	/^local on_attach = function(client, bufnr)$/;"	f
os_arch	private_dot_config/neofetch/config.conf	/^os_arch="on"$/;"	k
package_managers	private_dot_config/neofetch/config.conf	/^package_managers="on"$/;"	k
prefix	nvim_snippets/elixir.json	/^		"prefix": "checkbox",$/;"	s	object:eex_checkbox_input
prefix	nvim_snippets/elixir.json	/^		"prefix": "data",$/;"	s	object:eex_datalist
prefix	nvim_snippets/elixir.json	/^		"prefix": "econd",$/;"	s	object:eex_cond
prefix	nvim_snippets/elixir.json	/^		"prefix": "eelse",$/;"	s	object:eex_else
prefix	nvim_snippets/elixir.json	/^		"prefix": "eend",$/;"	s	object:eex_end_tag
prefix	nvim_snippets/elixir.json	/^		"prefix": "efor",$/;"	s	object:for
prefix	nvim_snippets/elixir.json	/^		"prefix": "efori",$/;"	s	object:fori
prefix	nvim_snippets/elixir.json	/^		"prefix": "eif",$/;"	s	object:eex_if
prefix	nvim_snippets/elixir.json	/^		"prefix": "eifa",$/;"	s	object:eex_ifa
prefix	nvim_snippets/elixir.json	/^		"prefix": "eife",$/;"	s	object:eex_if_else
prefix	nvim_snippets/elixir.json	/^		"prefix": "et",$/;"	s	object:eex_render_block
prefix	nvim_snippets/elixir.json	/^		"prefix": "eunless",$/;"	s	object:eex_unless
prefix	nvim_snippets/elixir.json	/^		"prefix": "handle_call",$/;"	s	object:handle_call
prefix	nvim_snippets/elixir.json	/^		"prefix": "handle_cast",$/;"	s	object:handle_cast
prefix	nvim_snippets/elixir.json	/^		"prefix": "handle_continue",$/;"	s	object:handle_continue
prefix	nvim_snippets/elixir.json	/^		"prefix": "handle_info",$/;"	s	object:handle_info
prefix	nvim_snippets/elixir.json	/^		"prefix": "he",$/;"	s	object:lv_handle_event
prefix	nvim_snippets/elixir.json	/^		"prefix": "hi",$/;"	s	object:lv_handle_info
prefix	nvim_snippets/elixir.json	/^		"prefix": "hidden",$/;"	s	object:eex_hidden_input
prefix	nvim_snippets/elixir.json	/^		"prefix": "hp",$/;"	s	object:lv_handle_params
prefix	nvim_snippets/elixir.json	/^		"prefix": "input",$/;"	s	object:eex_input
prefix	nvim_snippets/elixir.json	/^		"prefix": "lt",$/;"	s	object:lv_template
prefix	nvim_snippets/elixir.json	/^		"prefix": "lvtest",$/;"	s	object:lv_test_module
prefix	nvim_snippets/elixir.json	/^		"prefix": "mount",$/;"	s	object:lv_mount
prefix	nvim_snippets/elixir.json	/^		"prefix": "rend",$/;"	s	object:lv_rend
prefix	nvim_snippets/elixir.json	/^		"prefix": "test",$/;"	s	object:lv_test
prefix	nvim_snippets/elixir.json	/^    "prefix": "dynamic_supervisor",$/;"	s	object:DynamicSupervisor
prefix	nvim_snippets/elixir.json	/^    "prefix": "gen_server",$/;"	s	object:GenServer
prefix	nvim_snippets/elixir.json	/^    "prefix": "supervisor",$/;"	s	object:Supervisor
prefix	nvim_snippets/erlang.json	/^        "prefix" : ["gen_event-behaviour"],$/;"	a	object:erlang gen_event behavior
prefix	nvim_snippets/erlang.json	/^        "prefix" : ["gen_fsm-behaviour"],$/;"	a	object:erlang gen_fsm behavior
prefix	nvim_snippets/erlang.json	/^        "prefix" : ["gen_server-behaviour"],$/;"	a	object:erlang gen_server behavior
prefix	nvim_snippets/erlang.json	/^        "prefix" : ["gen_statem-behaviour"],$/;"	a	object:erlang gen_statem behavior
prefix	nvim_snippets/erlang.json	/^        "prefix" : ["supervisor-behaviour"],$/;"	a	object:erlang supervisor behavior
prefix	nvim_snippets/erlang.json	/^    "prefix": ["childspec"],$/;"	a	object:childspec
prefix	nvim_snippets/markdown.json	/^    "prefix": ["incident-report"],$/;"	a	object:Class
provider_selector	private_dot_config/nvim/lua/plugins/config/nvim-ufo.lua	/^    provider_selector = function(bufnr, filetype, buftype)$/;"	f
public_ip_host	private_dot_config/neofetch/config.conf	/^public_ip_host="http:\/\/ident.me"$/;"	k
public_ip_timeout	private_dot_config/neofetch/config.conf	/^public_ip_timeout=2$/;"	k
q	dot_tmux.conf	/^set -ga terminal-overrides '*:Ss=\\E[%p1%d q:Se=\\E[ q' # this is for the cursor shape$/;"	k
qpopd	private_dot_config/zsh/functions.zsh	/^qpopd() {$/;"	f
qpushd	private_dot_config/zsh/functions.zsh	/^qpushd() {$/;"	f
refresh_rate	private_dot_config/neofetch/config.conf	/^refresh_rate="off"$/;"	k
scope	nvim_snippets/elixir.json	/^    "scope": "source.elixir"$/;"	s	object:DynamicSupervisor
scope	nvim_snippets/elixir.json	/^    "scope": "source.elixir"$/;"	s	object:GenServer
scope	nvim_snippets/elixir.json	/^    "scope": "source.elixir"$/;"	s	object:Supervisor
separator	private_dot_config/neofetch/config.conf	/^separator=":"$/;"	k
shell_path	private_dot_config/neofetch/config.conf	/^shell_path="off"$/;"	k
shell_version	private_dot_config/neofetch/config.conf	/^shell_version="on"$/;"	k
song_format	private_dot_config/neofetch/config.conf	/^song_format="%artist% - %album% - %title%"$/;"	k
song_shorthand	private_dot_config/neofetch/config.conf	/^song_shorthand="off"$/;"	k
source_if_exists	private_dot_config/zsh/functions.zsh	/^source_if_exists() {$/;"	f
speed_shorthand	private_dot_config/neofetch/config.conf	/^speed_shorthand="off"$/;"	k
speed_type	private_dot_config/neofetch/config.conf	/^speed_type="bios_limit"$/;"	k
split_tldr	private_dot_config/zsh/functions.zsh	/^split_tldr() {$/;"	f
stdout	private_dot_config/neofetch/config.conf	/^stdout="off"$/;"	k
thumbnail_dir	private_dot_config/neofetch/config.conf	/^thumbnail_dir="${XDG_CACHE_HOME:-${HOME}\/.cache}\/thumbnails\/neofetch"$/;"	k
title_fqdn	private_dot_config/neofetch/config.conf	/^title_fqdn="off"$/;"	k
underline_char	private_dot_config/neofetch/config.conf	/^underline_char="-"$/;"	k
underline_enabled	private_dot_config/neofetch/config.conf	/^underline_enabled="on"$/;"	k
uptime_shorthand	private_dot_config/neofetch/config.conf	/^uptime_shorthand="on"$/;"	k
use_sops	private_dot_config/direnv/lib/executable_use_sops.sh	/^use_sops() {$/;"	f
xoffset	private_dot_config/neofetch/config.conf	/^xoffset=0$/;"	k
yoffset	private_dot_config/neofetch/config.conf	/^yoffset=0$/;"	k
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
