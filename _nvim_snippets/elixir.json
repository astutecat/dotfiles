{
  "GenServer": {
    "prefix": "gen_server",
    "body": [
      "defmodule $1 do",
      "  use GenServer",
      "",
      "  def start_link(${init_args}) do",
      "    # you may want to register your server with `name: __MODULE__`",
      "    # as a third argument to `start_link`",
      "    GenServer.start_link(__MODULE__, [${init_args}])",
      "  end",
      "",
      "  def init(_args) do",
      "    {:ok, :initial_state}",
      "  end",
      "end"
    ],
    "description": "Insert code for a OTP GenServer",
    "scope": "source.elixir"
  },
  "Supervisor": {
    "prefix": "supervisor",
    "body": [
      "defmodule $1 do",
      "  use Supervisor",
      "",
      "  def start_link(${args}) do",
      "    Supervisor.start_link(__MODULE__, [${args}], name: __MODULE__)",
      "  end",
      "",
      "  def init([${args}]) do",
      "    children = []",
      "",
      "    Supervisor.init(children, strategy: :one_for_one)",
      "  end",
      "end"
    ],
    "description": "Insert code for an OTP Supervisor",
    "scope": "source.elixir"
  },
  "DynamicSupervisor": {
    "prefix": "dynamic_supervisor",
    "body": [
      "defmodule $1 do",
      "  use DynamicSupervisor",
      "",
      "  def start_link(${init_args}) do",
      "    DynamicSupervisor.start_link(__MODULE__, [${init_args}], name: __MODULE__)",
      "  end",
      "",
      "  def start_child(${child_args}) do",
      "    child_spec = %{",
      "      id: ${ChildModule},",
      "      start: {${ChildModule}, :start_link, [${child_args}]},",
      "      restart: :transient,",
      "      shutdown: :brutal_kill,",
      "      type: :worker,",
      "      modules: [${ChildModule}],",
      "    }",
      "",
      "    DynamicSupervisor.start_child(__MODULE__, child_spec)",
      "  end",
      "",
      "  def init([${init_args}]) do",
      "    DynamicSupervisor.init(strategy: :one_for_one)",
      "  end",
      "end"
    ],
    "description": "Insert code for a DynamicSupervisor",
    "scope": "source.elixir"
  },
  "handle_info": {
    "prefix": "handle_info",
    "body": [
      "@impl GenServer",
      "def handle_info($1, state) do",
      "  $0",
      "  {:noreply, state}",
      "end"
    ]
  },
  "handle_continue": {
    "prefix": "handle_continue",
    "body": [
      "@impl GenServer",
      "def handle_continue($1, state) do",
      "  $0",
      "  {:noreply, state}",
      "end"
    ]
  },
  "handle_call": {
    "prefix": "handle_call",
    "body": [
      "@impl GenServer",
      "def handle_call($1, _from, state) do",
      "  $0",
      "  {:reply, :ok, state}",
      "end"
    ]
  },
  "handle_cast": {
    "prefix": "handle_cast",
    "body": [
      "@impl GenServer",
      "def handle_cast($1, state) do",
      "  $0",
      "  {:noreply, state}",
      "end"
    ]
  },
  "moduledoc_external": {
    "prefix": "moduledoc_external",
    "body": [
      "@external_resource ${\"README.md\"}",
      "@moduledoc @external_resource",
      "           |> File.read!()",
      "           |> String.split(\"<!-- MDOC !-->\")",
      "           |> Enum.fetch!(1)"
    ]
  }
}
